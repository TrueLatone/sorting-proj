        // TO RUN ALL IN ONE "-t"
        for (int sz = 0; sz < 6; sz++)
        { // 6 size
            int SIZE = siz[sz];
            ofstream fo("size_" + to_string(SIZE) + ".txt");
            fo << "SIZE: " << SIZE << endl;
            vector<int> arr(SIZE);
            for (int i = 0; i < 4; i++)
            { // 4 data types
                fo << "Order: " << orders[i] << endl;
                if (i == 0 || i == 1)
                {
                    for (int k = 0; k < 12; k++)
                    { // Each algorithm
                        resT.assign(10, 0);
                        resC.assign(10, 0);
                        for (int j = 0; j < 10; j++)
                        { // 10 tests for each algorithm
                            GenerateData(arr.data(), SIZE, i);
                            RunAlgorithmtest(algorithmsDB[k], arr.data(), SIZE, comp, tim);
                            resT[j] = tim.count();
                            resC[j] = comp;
                        }
                        // Enable to show results
                        // for (int i = 0; i < 100; i++) fo << resT[i] << " ";
                        // for (int i = 0; i < 100; i++) fo << resC[i] << " ";
                        fo << endl;
                        fo << "Algorithm: " << algorithmsDB[k] << endl;
                        fo << "Average Time: " << averageT(resT, 10) << endl;
                        fo << "Average Comparisons " << averageC(resC, 10) << endl;
                        fo << "===============================================" << endl;
                    }
                }
                else if (i == 2 || i == 3)
                {
                    for (int k = 0; k < 12; k++)
                    { // Each algorithm
                        GenerateData(arr.data(), SIZE, i);
                        RunAlgorithmtest(algorithmsDB[k], arr.data(), SIZE, comp, tim);
                        fo << endl;
                        fo << "Algorithm: " << algorithmsDB[k] << endl;
                        fo << "Time: " << tim.count() << endl;
                        fo << "Comparisons: " << comp << endl;
                        fo << "==============================================";
                    }
                    fo << "+++++++++++++++++++++++++++++++++++++++" << endl;
                    fo << "+++++++++++++++++++++++++++++++++++++++" << endl;
                }
            }
            fo << "---------------------------------------------" << endl;
            fo << "---------------------------------------------" << endl;
            fo.close();
        }
    }
    return 0;
}




























// ORIGINAL

        // TO RUN ALL IN ONE "-t"
        for (int sz = 0; sz < 6; sz++) { // 6 size
            int SIZE = siz[sz];
            ofstream fo("size_" + to_string(SIZE) + ".txt");
            fo << "SIZE: " << SIZE << endl;
            vector<int> arr(SIZE);
            for (int i = 0; i < 4; i++) { // 4 data types
                fo << "Order: " << orders[i] << endl;
                for (int k = 0; k < 12; k++)
                { // Each algorithm
                    resT.assign(10, 0);
                    resC.assign(10, 0);
                    for (int j = 0; j < 10; j++)
                    { // 10 tests for each algorithm
                        GenerateData(arr.data(), SIZE, i);
                        RunAlgorithmtest(algorithmsDB[k], arr.data(), SIZE, comp, tim);
                        resT[j] = tim.count();
                        resC[j] = comp;
                    }
                    // Enable to show results
                    // for (int i = 0; i < 100; i++) fo << resT[i] << " ";
                    // for (int i = 0; i < 100; i++) fo << resC[i] << " ";
                    fo << endl;
                    fo << "Algorithm: " << algorithmsDB[k] << endl;
                    fo << "Average Time: " << averageT(resT, 10) << endl;
                    fo << "Average Comparisons " << averageC(resC, 10) << endl;
                    fo << "===============================================" << endl;
                }
                fo << "+++++++++++++++++++++++++++++++++++++++" << endl;
                fo << "+++++++++++++++++++++++++++++++++++++++" << endl;
            }
            fo << "---------------------------------------------" << endl;
            fo << "---------------------------------------------" << endl;
            fo.close();
        }
    }
    return 0;
}